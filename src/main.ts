import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import * as cookieParser from 'cookie-parser';
import { ArgumentsHost, ValidationPipe } from '@nestjs/common';
import * as express from 'express';
import { join } from 'path';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.use(cookieParser());
  app.useGlobalPipes(
    new ValidationPipe({
      whitelist: true, // ‡∏ï‡∏±‡∏î property ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô DTO ‡∏≠‡∏≠‡∏Å
      forbidNonWhitelisted: true, // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ prop ‡πÅ‡∏õ‡∏•‡∏Å ‚Üí error
      transform: true, // ‡πÅ‡∏õ‡∏•‡∏á type ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö DTO ‡πÄ‡∏ä‡πà‡∏ô string -> number
    }),
  );
  // app.useGlobalFilters(new HttpExceptionFilter());
  app.useGlobalFilters({
    catch(exception: any, host: ArgumentsHost) {
      console.error('üî• Caught exception:', exception);
      throw exception;
    },
  });

  const staticFolders = ['products', 'users', 'categories', 'slides'];

  for (const folder of staticFolders) {
    app.use(
      `/public/uploads/${folder}`,
      express.static(join(__dirname, '..', `public/uploads/${folder}`)),
    );
  }

  app.use(
    '/public/temp-uploads',
    express.static(join(__dirname, '..', 'public/temp-uploads')),
  );

  app.enableCors({
    origin: 'http://localhost:3000', // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Next.js ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏ö‡∏ô‡∏û‡∏≠‡∏£‡πå‡∏ï 3001
    credentials: true, // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á cookies ‡∏´‡∏£‡∏∑‡∏≠ headers ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
  });
  await app.listen(process.env.PORT ?? 3001);
}
bootstrap();
